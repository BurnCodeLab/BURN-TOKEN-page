const {
    Connection,
    PublicKey,
    Transaction,
    clusterApiUrl,
} = require('@solana/web3.js');
const splToken = require('@solana/spl-token');

// Define constants
const TOKEN_MINT_ADDRESS = '9nGmUbhs1dh1wSgpwo6V25t4J3nmhYPMhAHmjmxZpump'; // SPL Token Mint Address
const BURN_ADDRESS = '11111111111111111111111111111111'; // Burn Address
const BURN_AMOUNT = 69420; // Amount to burn

// Connect to Solana Cluster
const connection = new Connection(clusterApiUrl('devnet'), 'confirmed');

// Function to check SPL token balance
async function checkTokenBalance(walletPublicKey) {
    try {
        const tokenAccounts = await connection.getParsedTokenAccountsByOwner(
            new PublicKey(walletPublicKey),
            {
                mint: new PublicKey(TOKEN_MINT_ADDRESS),
            }
        );

        if (tokenAccounts.value.length === 0) {
            return 0; // No SPL token account found
        }

        const balance = tokenAccounts.value[0].account.data.parsed.info.tokenAmount.uiAmount;
        return balance;
    } catch (error) {
        console.error('Error checking token balance:', error);
        return 0;
    }
}

// Function to burn tokens
async function burnTokens(provider, walletPublicKey) {
    try {
        const tokenAccounts = await connection.getParsedTokenAccountsByOwner(
            new PublicKey(walletPublicKey),
            {
                mint: new PublicKey(TOKEN_MINT_ADDRESS),
            }
        );

        if (tokenAccounts.value.length === 0) {
            alert('No token account found for the specified SPL token.');
            return;
        }

        const tokenAccount = tokenAccounts.value[0].pubkey;

        const transaction = new Transaction().add(
            splToken.Token.createTransferInstruction(
                splToken.TOKEN_PROGRAM_ID,
                tokenAccount,
                new PublicKey(BURN_ADDRESS),
                new PublicKey(walletPublicKey),
                [],
                BURN_AMOUNT
            )
        );

        const signedTransaction = await provider.signTransaction(transaction);
        const signature = await connection.sendRawTransaction(signedTransaction.serialize());
        await connection.confirmTransaction(signature, 'confirmed');
        alert(`Burn transaction successful! Signature: ${signature}`);
    } catch (error) {
        console.error('Error during burn transaction:', error);
        alert(`Burn transaction failed: ${error.message}`);
    }
}

// Connect to Phantom Wallet
async function connectPhantom() {
    const provider = window.solana;

    if (!provider || !provider.isPhantom) {
        alert('Phantom Wallet is not installed. Please install it to proceed.');
        window.open('https://phantom.app/', '_blank');
        return;
    }

    try {
        const resp = await provider.connect();
        const walletPublicKey = resp.publicKey.toString();

        const balance = await checkTokenBalance(walletPublicKey);
        if (balance < BURN_AMOUNT) {
            alert(`Insufficient balance. You have ${balance} tokens, but ${BURN_AMOUNT} are required.`);
            return;
        }

        const confirmation = confirm(
            `You have ${balance} tokens. Do you want to burn ${BURN_AMOUNT} tokens?`
        );

        if (!confirmation) return;

        await burnTokens(provider, walletPublicKey);
    } catch (error) {
        console.error('Error connecting to Phantom:', error);
        alert('Connection failed. Please try again.');
    }
}

// Add event listener to your "Connect Wallet" button
document.getElementById('connectWallet').addEventListener('click', connectPhantom);
